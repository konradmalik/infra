API_VERSION = "2"
HOST_SHARED_PATH = ENV["HOME"]
GUEST_HOME = "/home/vagrant"
GUEST_ANSIBLE_FOLDER = GUEST_HOME + "/Code/infra/environments/dev/ansible"
GUEST_SHARED_PATH = "/vagrant"
box = "archlinux/archlinux"
hostname = "devarch"
ip = "192.168.56.56" # must be 10.0.0.0/8 192.168.0.0/16

$repos = <<-'SCRIPT'
rm -rf ~/Code
mkdir -p ~/Code
cp -a "$1/Code/dotfiles" ~/Code/
cp -a "$1/Code/infra" ~/Code/
SCRIPT

cpus = 4
memory = 8192
disk_size = "150GB"

Vagrant.configure(API_VERSION) do |config|
  config.vm.box = box
  config.vm.hostname = hostname

  # networking
  config.vm.network "private_network", ip: ip
  # fixes error with ssh after provisioning
  config.ssh.username = "vagrant"
  config.ssh.password = "vagrant"

  # files syncing
  config.vm.synced_folder HOST_SHARED_PATH, GUEST_SHARED_PATH

  # force disk size
  unless Vagrant.has_plugin?("vagrant-disksize")
    system "vagrant plugin install vagrant-disksize"
  end
  config.disksize.size = disk_size

  config.vm.network "forwarded_port", guest: 8080, host_ip: "127.0.0.1", host: 8080

  config.vm.provider :virtualbox do |vb|
    vb.name = hostname
    vb.memory = memory
    vb.cpus = cpus
    # don't need video
    vb.gui = false
    # don't need audio
    vb.customize ["modifyvm", :id, "--audio", "none"]
    # shared clipboard
    vb.customize ['modifyvm', :id, '--clipboard', 'bidirectional']
    vb.customize ['modifyvm', :id, '--draganddrop', 'bidirectional']
  end

  config.vm.provider :libvirt do |lv|
    lv.cpu_mode = "host-model"
    lv.memory = memory
    lv.cpus = cpus
    lv.default_prefix = hostname
  end

  # provisioning
  # Disable swap for each vm
  config.vm.provision "shell", inline: "swapoff -a"
  # copy our repos to the correct place
  config.vm.provision "shell" do |s|
    s.inline = $repos
    s.privileged = false
    s.args = [GUEST_SHARED_PATH]
  end
  # main provisioning
  config.vm.provision "ansible_local" do |ansible|
    ansible.playbook = GUEST_ANSIBLE_FOLDER + "/playbook.yml"
    ansible.inventory_path = GUEST_ANSIBLE_FOLDER + "/inventory.yaml"
    ansible.limit  = "local"
    ansible.extra_vars  = { gui_apps: false }
    ansible.provisioning_path = GUEST_HOME
    # set this just to force running galaxy
    ansible.galaxy_role_file = GUEST_ANSIBLE_FOLDER + "/requirements.yml"
    ansible.galaxy_command = "ansible-galaxy collection install -r " + GUEST_ANSIBLE_FOLDER + "/requirements.yml --force"
  end
end

