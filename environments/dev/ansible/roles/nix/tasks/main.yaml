- name: install nix from script
  become: true
  args:
    executable: /bin/bash
  shell:
    cmd: yes | sh <(curl -L https://nixos.org/nix/install) --daemon
    creates: "/nix"

# on linux make sure kvm is accessible, cross-arch builds will benefit
- block:
    - name: create udev rule to allow kvm
      copy:
        content: |
          KERNEL=="kvm", GROUP="kvm", MODE="0660"
        dest: /etc/udev/rules.d/99-kvm.rules

    - name: adding existing user "{{ target_user }}" to group "kvm"
      user:
        name: "{{ target_user }}"
        groups: [kvm]
        append: yes
  become: true
  when:
    - not is_docker
    - ansible_system == "Linux"

- name: link nix config
  shell:
    chdir: "{{ repo_path }}/files"
    cmd: stow --target="$XDG_CONFIG_HOME"{{ item }}
  with_items:
    - nix

- name: build and activate home flake
  shell:
    chdir: "{{ repo_path }}"
    # interactive is required, as nix paths are added in zshrc and bashrc, and those are sourced only for interactive shells
    cmd: /bin/bash -i -c "nix build '.#homeConfigurations.{{ target_user }}@{{ ansible_hostname }}.activationPackage' && ./result/activate"
  when:
    - ansible_system == "Linux"

- name: build and activate nix-darwin flake
  shell:
    chdir: "{{ repo_path }}"
    # interactive is required, as nix paths are added in zshrc and bashrc, and those are sourced only for interactive shells
    cmd: /bin/bash -i -c "nix build .#darwinConfigurations.{{ target_user }}@{{ ansible_hostname }}.system && ./result/sw/bin/darwin-rebuild switch --flake ."
  when:
    - ansible_system == "Darwin"
